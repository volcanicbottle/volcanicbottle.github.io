<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>caiyuan</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on caiyuan</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 10 Jan 2025 16:49:39 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>左值右值</title>
      <link>http://localhost:1313/post/lvalue-rvalue/</link>
      <pubDate>Fri, 10 Jan 2025 16:49:39 -0500</pubDate>
      <guid>http://localhost:1313/post/lvalue-rvalue/</guid>
      <description>&lt;h1 id=&#34;左值右值&#34;&gt;左值右值&lt;/h1&gt;&#xA;&lt;p&gt;我学了两次这个左值右值，发现总忘。写这篇笔记记录一下方便复习。&lt;/p&gt;&#xA;&lt;h3 id=&#34;为什么要区分左值与右值&#34;&gt;为什么要区分左值与右值？&lt;/h3&gt;&#xA;&lt;p&gt;首先是为什么要有左值（lvalue）和右值(rvalue)，不少语言并不区分两个令人困惑的概念。&lt;br&gt;&#xA;&lt;del&gt;真正的原因其实要追溯到C语言的设计，这里只看C++上左右值的应用，实际上有自C++11开始，表达式的值分为左值、将亡值、纯右值以及两种混合泛左值和右值五种。&lt;/del&gt;&lt;br&gt;&#xA;（&lt;a href=&#34;https://www.zhihu.com/question/428340896/answer/2353437577&#34;&gt;知乎链接&lt;/a&gt;）&lt;/p&gt;&#xA;&lt;p&gt;C++11 中有右值引用，通过这个可以实现移动赋值操作符，移动构造函数。这是什么？&lt;/p&gt;&#xA;&lt;h3 id=&#34;c有两种赋值方式拷贝赋值和移动赋值&#34;&gt;C++有两种赋值方式：拷贝赋值和移动赋值。&lt;/h3&gt;&#xA;&lt;p&gt;拷贝赋值是十分常见的：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 创建一个 vector 并初始化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    std::vector&amp;lt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;&amp;gt; vec1 = {1, 2, 3, 4, 5};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 使用拷贝赋值将 vec1 的值赋给 vec2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    std::vector&amp;lt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;&amp;gt; vec2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vec2 = vec1; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是一个最简单的拷贝，vec2 将会有复制一遍 vec1 的内容，但是储存在另一块内存中。以下是一个很简单的 Point 类，很好地说明了这一点：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;Point&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;public&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 构造函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    Point(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; x = 0, &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; y = 0) : x_(x), y_(y) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 拷贝赋值运算符&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    Point &amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; Point &amp;amp;other) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;// 直接赋值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;        x_ = other.x_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y_ = other.y_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; *&lt;span style=&#34;font-weight:bold&#34;&gt;this&lt;/span&gt;; &lt;span style=&#34;font-style:italic&#34;&gt;// 返回当前对象的引用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 打印点的坐标&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;&#34;&gt;void&lt;/span&gt; print() &lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std::cout &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Point(&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; x_ &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; y_ &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;)&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然这存在一个问题，这种直接复制所有内容的深拷贝显然不适用于大量数据，好在C++有指针。&#xA;&lt;strong&gt;移动赋值&lt;/strong&gt; 解决了这个问题，通过“移动”资源的所有权，而不是复制资源，从而避免了昂贵的拷贝操作。移动操作将资源从一个对象转移到另一个对象，通常通过转移指针的方式，而不是进行深拷贝。相当于新对象窃取了源对象的资源。&lt;/p&gt;</description>
    </item>
    <item>
      <title>左值右值</title>
      <link>http://localhost:1313/posts/lvalue-rvalue/</link>
      <pubDate>Fri, 10 Jan 2025 16:49:39 -0500</pubDate>
      <guid>http://localhost:1313/posts/lvalue-rvalue/</guid>
      <description>&lt;h1 id=&#34;左值右值&#34;&gt;左值右值&lt;/h1&gt;&#xA;&lt;p&gt;我学了两次这个左值右值，发现总忘。写这篇笔记记录一下方便复习。&lt;/p&gt;&#xA;&lt;h3 id=&#34;为什么要区分左值与右值&#34;&gt;为什么要区分左值与右值？&lt;/h3&gt;&#xA;&lt;p&gt;首先是为什么要有左值（lvalue）和右值(rvalue)，不少语言并不区分两个令人困惑的概念。&lt;br&gt;&#xA;&lt;del&gt;真正的原因其实要追溯到C语言的设计，这里只看C++上左右值的应用，实际上有自C++11开始，表达式的值分为左值、将亡值、纯右值以及两种混合泛左值和右值五种。&lt;/del&gt;&lt;br&gt;&#xA;（&lt;a href=&#34;https://www.zhihu.com/question/428340896/answer/2353437577&#34;&gt;知乎链接&lt;/a&gt;）&lt;/p&gt;&#xA;&lt;p&gt;C++11 中有右值引用，通过这个可以实现移动赋值操作符，移动构造函数。这是什么？&lt;/p&gt;&#xA;&lt;h3 id=&#34;c有两种赋值方式拷贝赋值和移动赋值&#34;&gt;C++有两种赋值方式：拷贝赋值和移动赋值。&lt;/h3&gt;&#xA;&lt;p&gt;拷贝赋值是十分常见的：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 创建一个 vector 并初始化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    std::vector&amp;lt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;&amp;gt; vec1 = {1, 2, 3, 4, 5};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 使用拷贝赋值将 vec1 的值赋给 vec2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    std::vector&amp;lt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;&amp;gt; vec2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vec2 = vec1; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是一个最简单的拷贝，vec2 将会有复制一遍 vec1 的内容，但是储存在另一块内存中。以下是一个很简单的 Point 类，很好地说明了这一点：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;Point&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;public&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 构造函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    Point(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; x = 0, &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; y = 0) : x_(x), y_(y) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 拷贝赋值运算符&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    Point &amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;operator&lt;/span&gt;=(&lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; Point &amp;amp;other) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;// 直接赋值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;        x_ = other.x_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y_ = other.y_;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; *&lt;span style=&#34;font-weight:bold&#34;&gt;this&lt;/span&gt;; &lt;span style=&#34;font-style:italic&#34;&gt;// 返回当前对象的引用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 打印点的坐标&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;&#34;&gt;void&lt;/span&gt; print() &lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std::cout &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;Point(&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; x_ &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; y_ &amp;lt;&amp;lt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;)&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然这存在一个问题，这种直接复制所有内容的深拷贝显然不适用于大量数据，好在C++有指针。&#xA;&lt;strong&gt;移动赋值&lt;/strong&gt; 解决了这个问题，通过“移动”资源的所有权，而不是复制资源，从而避免了昂贵的拷贝操作。移动操作将资源从一个对象转移到另一个对象，通常通过转移指针的方式，而不是进行深拷贝。相当于新对象窃取了源对象的资源。&lt;/p&gt;</description>
    </item>
    <item>
      <title>First Post</title>
      <link>http://localhost:1313/post/first-post/</link>
      <pubDate>Sun, 05 Jan 2025 20:39:16 -0500</pubDate>
      <guid>http://localhost:1313/post/first-post/</guid>
      <description>&lt;p&gt;###第二次第一个blog###&#xA;这是我的第二个博客网站，第一个使用了wordpress随手搭建了一个，但是一直什么东西都没写。然后1年服务器过期了，好处是发现做点好玩的东西真的非常简单，甚至可以不用花一分钱。&lt;/p&gt;&#xA;&lt;p&gt;这次是看到一个熟人的blog，他的blog有非常有意思的想法。其实我平时也会想些事情，但是总没有把这些奇怪的东西公开的打算。不过后来一想反正这个小网站一年也没有浏览量，只要我不公开宣传和放在私密空间吃灰也差不多（笑）。第二是我希望我可以有办法回顾和反思一下我的生活，毕竟没有ddl以后生活可以说颓废到混沌了，明明总是有一堆有意思有意义事情可以做。立个flag，每天写肯定是吹牛，每两天吧。两天一篇回顾一下生活和目标。感觉像是日记，正经人谁写日记啊哈哈哈哈哈。&lt;/p&gt;&#xA;&lt;p&gt;这个blog网站叫小菜园，就是现在找些好玩的种子种下去，看看几年后可以长出来什么好玩的东西。我是个很喜欢谐音梗的人，在这里讲个谐音梗笑话作为结尾：虾和蚌都得了一百分，朋友问虾：“你怎么考的？”虾得意地说：“我抄蚌的！”&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一个帖子</title>
      <link>http://localhost:1313/posts/first-post/</link>
      <pubDate>Sun, 05 Jan 2025 20:39:16 -0500</pubDate>
      <guid>http://localhost:1313/posts/first-post/</guid>
      <description>&lt;p&gt;这是我的&lt;del&gt;第二个&lt;/del&gt;博客网站，第一个使用了wordpress随手搭建了一个，但是一直什么东西都没写。然后1年服务器过期了，好处是发现做点好玩的东西真的非常简单，甚至可以不用花一分钱。&lt;/p&gt;&#xA;&lt;p&gt;这次是看到一个熟人的blog，他的blog有非常有意思的想法。其实我平时也会想些事情，但是总没有把这些奇怪的东西公开的打算。不过后来一想反正这个小网站一年也没有浏览量，只要我不公开宣传和放在私密空间吃灰也差不多（笑）。第二是我希望我可以有办法回顾和反思一下我的生活，毕竟没有ddl以后生活可以说颓废到混沌了，明明总是有一堆有意思有意义事情可以做。立个flag，每天写肯定是吹牛，每两天吧。两天一篇回顾一下生活和目标。感觉像是日记，正经人谁写日记啊哈哈哈哈哈。&lt;/p&gt;&#xA;&lt;p&gt;这个blog网站叫小菜园，就是现在找些好玩的种子种下去，看看几年后可以长出来什么好玩的东西。我是个很喜欢谐音梗的人，在这里讲个谐音梗笑话作为结尾：虾和蚌都得了一百分，朋友问虾：“你怎么考的？”虾得意地说：“我抄蚌的！”&lt;/p&gt;&#xA;&lt;p&gt;&lt;del&gt;下面的评论功能集成的真丑&lt;/del&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
